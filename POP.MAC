	.TITLE POP
	.REPT 0

	"COPYRIGHT 1981 ATARI, INC.  UNAUTHO-
	RIZED REPRODUCTION, ADAPTATION, DIS-
	TRIBUTION, PERFORMANCE OR DISPLAY OF
	THIS COMPUTER PROGRAM OR THE ASSOCIATED
	AUDIOVISUAL WORK IS STRICTLY PROHIBITED."

	.ENDR
;
;
;	VCS POP
;
;
;	MIKE MAHAR		AUG 27, 1981
;
;
;
;
;
;THIS PROGRAM IS THE VCS POINT OF
;PURCHASE MACHINE GAME
;SELECTION SOFTWARE.  THERE ARE THREE
;SCREENS-
;
;	THE RAINBOW ATARI LOGO.  THIS STAYS
;	ON THE SCREEN FOR 20 SECONDS
;	IF NONE OF THE THREE CONTROL BUTTONS
;	ARE PUSHED
;
;	"ATAR VIDEO COMPUTER SYSTEM" 10 SECONDS
;	IF NO BUTTONS ARE PUSHED
;
;	"ENTER GAME NUMBER" HAS TWO DIGITS
;	FOR DISPLAYING THE DESIRED GAME
;	NUMBER.  THIS WILL STAY UP FOR 30
;	SECONDS AFTER A DIGIT BUTTON IS PRESSED.
;	AFTER 30 SECONDS THE FIRST SCREEN IS
;	DISPLAYED AGAIN.  IF THE START BUTTON
;	IS PRESSED THE SELECTED GAME IS STARTED
;
;THE SELECTED GAME WILL RUN FOR AS LONG
;THE TIMER SWITCHES ARE SET. THE MACHINE
;WILL THEN RESET AND DISPLAY THE FIRST SCREEN
	.ENABL AMA
	.RADIX 16
;   TIA REGISTER ADDRESSES
VSYNC	=	 00	;SYNC CONTROL BITS
VBLANK  =	 01
WSYNC   =	 02
RSYNC   =	 03
NUSIZ0  =	 04 	;OBJECT AND MISSLE
NUSIZ1  =	 05 	;HORIZONTAL DECODE CONTROL
COLUP0  =	 06 	;COLOR AND LUMINANCE 
COLUP1  =	 07 	;PLAYERS 0 AND 1, 
COLUPF  =	 08 	;PLAYFIELD
COLUBK  =	 09 	;AND BACKGROUND
CTRLPF  =	 0A 	;PLAYFIELD CONTROL
REFP0   =	 0B 	;PLAYER REFLECT BITS
REFP1   =	 0C
PF0     =	 0D 	;PLAYFIELD GRAPHICS
PF1     =	 0E
PF2     =	 0F
RESP0   =	 10 	;OBJECT HORIZONTAL
RESP1   =	 11 	;RESET STROBES
RESM0   =	 12
RESM1   =	 13
RESBL   =	 14
AUDC0   =	 15 	;AUDIO NOISE CONTROL
AUDC1   =	 16
AUDF0   =	 17 	;AUDIO FREQUENCY
AUDF1   =	 18 	;31.4KHZ-981HZ
AUDV0   =	 19 	;AUDIO VOLUME
AUDV1   =	 1A
GRP0    =	 1B 	;8 BIT OBJECT GRAPHICS
GRP1    =	 1C
ENAM0   =	 1D 	;1 BIT OBJECT GRAPHICSS
ENAM1   =	 1E
ENABL   =	 1F
HMP0    =	 20 	;HORIZONTAL MOTION
HMP1    =	 21 	;VECTORS -8<HM<+7
HMM0    =	 22
HMM1    =	 23
HMBL    =	 24
VDELP0  =	 25 	;1 LINE VERTICAL
VDELP1  =	 26 	;DELAY BIT
VDELBL  =	 27
RESMP0  =	 28 	;RESET MISSLE TO
RESMP1  =	 29 	;PLAYER
HMOVE   =	 2A 	;USE HM VECTORS STROBE
HMCLR   =	 2B 	;CLEAR HM VECTORS STROBE
CXCLR   =	 2C 	;CLEAR COLLISION LATCHES
	.PAGE
;READ ADDRESSES: BITS 7 AND 6
;COLLISION LATCHES (15)
CXM0P   =	 30 	;M0-P1,M0-P0
CXM1P   =	 31 	;M1-P0,M1-P1
CXP0FB  =	 32 	;P0-PF,P0-BL
CXP1FB  =	 33 	;P1-PF,P0-BL
CXM0FB  =	 34 	;M0-PF,M0-BL
CXM1FB  =	 35 	;M1-PF,M1-BL
CXBLPF  =	 36 	;BL-PF,(BIT6=0)
CXPPMM  =	 37 	;P0-P1,M0-M1
;INPUT PORTS (ALL BIT 7) 
INTP0   =	 38 	;POT PORTS
INPT1   =	 39
INPT2   =	 3A
INPT3   =	 3B
INPT4   =	 3C	;TRIGGER INPUTS
INPT5   =	 3D
;PIA AND TIMER (6532) LOCATIONS
PORTA   =	 280  
PORTB   =	 282
CTLSWA  =	 281  
CTLSWB  =	 283
TIMER   =	 284 		;READ TIMER 
TIM8T   =	 295 	;DIVIDE BY 8 CLOCKS
TIM64T  =	 296 	;DIVIDE BY 64
ROMSWT	=	 800
CSWTCH	=	800
	.PAGE

;   RAM DEFINITIONS
	.ASECT
	.= 80
PNTR0:	.BLKB	2		;POINTERS FOR KERNEL
PNTR1:	.BLKB	2
PNTR2:	.BLKB	2
PNTR3:	.BLKB	2
PNTR4:	.BLKB	2
PNTR5:	.BLKB	2
PNTR6:	.BLKB	1		;DOWN COUNTER FOR CHAR SEGMENTS  (6-0)
KERCNT:	.BLKB	1		;KERNEL TEXT LINE COUNTER  (0-9)
KERTP:	.BLKB	1		;KERNEL TEXT POINTER
T0:	.BLKB	1		;TEMP
TEXT:	.BLKB	^D25		;TEXT ADDRESS STORAGE
SCNNO:	.BLKB	1		;CURSOR Y POSITION
SECOND:	.BLKB	1		;CURSOR X POSITION
TICKS:	.BLKB	1		;PITCH OF MAIN AUDIO CHANNEL
TENS:	.BLKB	1		;TENS DIGIT
ONES:	.BLKB	1		;ONE DIGIT
SCRPAD:	.BLKB	12		;DOWNLODAD RAM FOR START UP CODE
TEMP:	.BLKB	1		;
OSWTCH:	.BLKB	1		;DEBOUNCE BYTE
SWSTAT:	.BLKB	1		;DEBOUNCE BYTE
TEMP2:	.BLKB	1
COLOR:	.BLKB	1		;STORE LOGO COLOR
OMAX:	.BLKB	1		;MAX ONES VALUE
TMAX:	.BLKB	1		;MAX TENS VALUE
	.PAGE

;   SCAN OUT AND KERNELS
	.=0F000
;
;   END VERTICAL BLANK
;
;THIS IS THE TEXT KERNAL.  IT WILL
;DISPLAY 4 LINES OF PLAY FIELD SO
;THAT THE LEFT SIDE IS COMPLETELY DIFFERENT
;FROM THE RIGHT SIDE.  ON THE THIRD SCREEN
;IT WILL PUT TWO DIGITS MADE FROM PLAYERS
;ON THE BOTTOM OF THE SCREEN
	JMP	WAKEUP
VBLKND:	STA	WSYNC		;START NEW LINE
	STA	HMOVE		;MOVE ALL OBJECTS
VBLKN2:	LDA	TIMER		;GET VBLANK COUNT-DOWN
	BNE	VBLKN2		;BRANCH IF VBLANK NOT OVER
	LDA	SCNNO
	BNE	10$
	JMP	LOGO
10$:
;
;   KERNEL
;
	LDX	#0		;INIT COLORS AMP SIZES
	LDA	#78
	JSR	CHRST
	INX
	LDA	#80
	JSR	CHRST
	STA	WSYNC
	STA	HMOVE
	LDA	#0
	STA	CTRLPF
	STA	VDELP0
	STA	VDELP1
	LDX	#88
	STX	COLUP0
	STX	COLUP1
	STX	COLUPF
	STA	NUSIZ0
	STA	NUSIZ1
				;START AT BEGINNING OF TEXT ARRAY
	STA	KERTP		;SAVE INDEX
	LDA	#3		;DISPLAY 4 LINES OF TEXT
	STA	KERCNT		;INIT DOWN COUNTER
LDMAPS:	LDA	#5		;SET UP 6 CHAR POINTERS
	STA	T0		;SAVE FOR COUNT DOWN
	LDX	#0		;POINT TO FIRST POINTER
	LDY	KERTP		;GET INDEX TO CHAR NAME
SETLOP:	STA	WSYNC		;START NEW LINE
	LDA	#GRAPH/100	;LOAD PROBABLE HIGH BYTE
	STA	PNTR0+1(X)	;PUT IN HIGH SLOT
	LDA	TEXT(Y)		;GET CHAR NAME
	ASL			;*2
	ADC	TEXT(Y)		;*3
	ASL			;*6
	BCC	FINADD		;BRANCH IF IN RANGE
	CLC
	ADC	TEXT(Y)		;*7
	BNE	FIXHGH		;(UNCONDITIONAL)
FINADD:	ADC	TEXT(Y)		;*7
	BCS	FIXHGH		;BRANCH IF CHAR GRAPHICS IN SECOND PAGE
	CMP	#0FC		;IS IT A "0"?
	BNE	STOREL		;ALL DONE IF NOT
FIXHGH:	INC	PNTR0+1(X)	;ELSE BUMP HIGH BYTE
	CLC
	ADC	# 4		;BUMP PAST HOLE BETWEEN PAGES
STOREL:	STA	PNTR0(X)	;STORE LOW BYTE OF POINTER
	INX			;BUMP TO NEXT POINTER ADDRESS
	INX
	INY			;BUMP TO NEXT CHAR TO BE DISPLAYED
	DEC	T0		;5 CHARS DONE?
	BPL	SETLOP		;BRANCH IF SO
	STA	WSYNC		;START NEW LINE
	STY	KERTP		;SAVE UPDATED POINTER
	LDA	#6		;DISPLAY 7 SEGMENTS
	STA	PNTR6		;INIT DOWN COUNTER
	LDX	#0		;LOAD BALL OFF CODE
	LDA	KERCNT		;GET LINE NOW BEING DISPLAYED
NOCUR:	STA	WSYNC		;KILL 3 LINES OF TIME
	STA	WSYNC
	STA	WSYNC
	LDX	#3
KERNEL:	STA	WSYNC
	LDY	PNTR6		;GET SEG INDEX
	LDA	@PNTR0(Y)	;GET PF0
	STA	PF0		;GET PF1
	LDA	@PNTR1(Y)	;GET PF2
	STA	PF1
	LDA	@PNTR2(Y)
	STA	PF2
	NOP			;PAUSE
	LDA	@PNTR3(Y)	;GET 3
	STA	PF0
	LDA	@PNTR4(Y)	;GET 4
	STA	PF1
	LDA	@PNTR5(Y)	;GET 5
	STA	PF2		;DO IT 3 TIMES
	DEX
	BNE	KERNEL		;
	LDX	#3		;
	DEC	PNTR6		;DO NEXT LINE
	BPL	KERNEL
	STA	WSYNC		;KILL A LINE
	LDA	#0
	STA	PF0		;CLEAR PF0
	STA	PF1		;THROUGH 2
	STA	PF2
	STA	WSYNC		;KILL 2 LINES
	STA	WSYNC
	DEC	KERCNT		;NEXT TEXT LINE
	BMI	BOTTOM		;DONE
	JMP	LDMAPS
BOTTOM:	LDA	SCNNO		;CHARACTER SCREEN?
	CMP	#2
	BNE	FWAIT		;NOPE
	LDA	#GRAPH/100
	STA	PNTR0+1
	STA	PNTR1+1
	LDA	TENS		;TENS IN PLAYER 0
	ASL
	ASL
	ASL
	SEC
	SBC	TENS
	STA	PNTR0		;POINTER 0
	LDA	ONES
	ASL
	ASL
	ASL
	SEC
	SBC	ONES
	STA	PNTR1		;POINTER 1
;
; TIGHT LOOP TO DISPLAY PLAYERS
;
	LDY	#6
10$:	STA	WSYNC		;START AT BEGINNING OF LINE
	STA	WSYNC
	LDA	@PNTR0(Y)
	STA	GRP0
	LDA	@PNTR1(Y)
	STA	GRP1
	DEY
	BPL	10$
FWAIT:
	STA	WSYNC
	STA	WSYNC
	LDA	#0
	STA	GRP0
	STA	GRP1
	JMP	OVRSCN		;START OVERSCAN CODE
	.PAGE
;THIS IS THE LOGO KERNAL.  IT USES
;A COMBINATION OF PLAYERS, MISSILES
;AND PLAY FIELD.  AS THE LOGO IS DRAWN
;THE PLAYERS AND MISSILES ARE H MOVED TO MAKE
;THE STRIPES CURVE LIKE THE LOGO.  THE MISSILE
;IS USED TO MAKE THE OBJECT AN ODD NUMBER
;OF PIXELS LONG
LOGO:	LDX	#3
10$:	LDA	IPOS(X)
	JSR	CHRST
	DEX
	BPL	10$
	LDA	#0
	STA	VDELP0
	STA	VDELP1
	STA	COLUPF
	LDA	#8
	STA	REFP1
	LDA	#3
	STA	CTRLPF
	LDA	#5
	STA	NUSIZ0
	STA	NUSIZ1
	INC	COLOR
	LDA	COLOR
	BNE	15$
	LDA	#10
	STA	COLOR
15$:	LDX	#2
	STA	WSYNC
	STA	HMOVE
	STA	WSYNC
	STX	ENAM0
	STX	ENAM1
	LDX	#0
	STX	HMP0
	STX	HMP1
	STX	HMM0
	STX	HMM1
	LDX	PZERO+61.
	STA	COLUP0
	STA	COLUP1
	STX	GRP0
	STX	GRP1
	LDX	#80
	STX	PF2
	LDX	#61.
20$:	STA	WSYNC		;MAIN LOOP
	STA	HMOVE		;THE PLAY IS MOVED ACCORDING TO
	STA	COLUP0		;THE TABLES
	STA	COLUPF
	STA	COLUP1
	LDY	PZERO(X)
	STY	GRP0
	STY	GRP1
	LDY	P0SHF(X)
	STY	HMP0
	LDY	M0SHF(X)
	STY	HMM0
	LDY	P1SHF(X)
	STY	HMP1
	LDY	M1SHF(X)
	STY	HMM1
	ADC	#2
	BCC	30$
	ADC	#0F
30$:	DEX
	BPL	20$
	LDA	#0
	STA	ENAM0
	STA	ENAM1
	STA	PF2
	STA	GRP0
	STA	GRP1

	STA	REFP1
	.PAGE
;THIS ROUTINE DRAWS THE CIRCLE R FOR
;REGISTERED TRADE MARK.  IT USES PLAYER 0
;AND A SIMPLE TABLE
R:	LDA	#0
	STA	VDELP0
	STA	NUSIZ0
	TAX
	LDA	#0A0
	JSR	CHRST
	STA	WSYNC
	STA	HMOVE
	LDA	#8D
	STA	COLUP0
	LDX	#9
10$:	STA	WSYNC
	LDA	TMR(X)
	STA	GRP0
	DEX
	BPL	10$
	.PAGE
;
; THE WORD ATARI IN 6 PLAYERS
;
;THE PLAYERS ARE UPDATED WHILE THE
;OTHER PLAYER IS BEING DISPLAYED.  THE
;TIMING IS VERY CRITICAL SO NOPS AND
;STORES THAT MUST BE FROM REGISTERS ARE
;USED
ATARI:	LDA	#1
	STA	VDELP0
	STA	VDELP1
	TAX
	LDA	#70
	JSR	CHRST
	DEX
	LDA	#68
	JSR	CHRST
	STA	WSYNC
	STA	HMOVE
	LDA	#8D
	STA	COLUP1
	LDA	#3
	STA	NUSIZ0
	STA	NUSIZ1
	LDX	#16.
10$:	LDA	AT0(X)
	STA	GRP0
	STA	WSYNC
	LDA	AT1(X)
	STA	GRP1
	LDA	AT2(X)
	STA	GRP0
	LDA	AT3(X)
	STA	TEMP
	LDA	AT4(X)
	LDY	AT5(X)
	TXS			;KILL TIME
	NOP
	NOP
	CMP	TEMP
	LDX	TEMP
	STX	GRP1		;KILL TIME
	STA	GRP0
	STY	GRP1		;MUST BE DONE QUICKLY
	STA	GRP0
	TSX
	DEX
	BPL	10$
	LDX	#0FF
	TXS
	JMP	OVRSCN
	.PAGE
;
;   COMPUTE HORIZONTAL RESET ROUTINE
;	(HRST TO RTS MUST BE ON SAME PAGE!)
;
CHRST:	SEC			;ADD OFFSET
	SBC	#^D47
	LDY	#2		;INITIALIZE LOOP COUNT
CHR1:	INY			;DIVIDE BY 15 LOOP
	SBC	#^D15
	BCS	CHR1		;BRANCH IF + REMAINDER
	EOR	#0FF		;COMPLEMENT REMAINDER
	SBC	#6		; -7 (CY = 0)
	JSR	NIBBLE		;SHIFT UP 4
;   ACTUAL HORIZONTAL RESET LOOP
HRST:	STY	WSYNC		;START LINE
HRST1:	DEY			;COUNT TIME 15*280NS
	BPL	HRST1		;(15 3.58MHZ CYCLES)
	STA	RESP0(X)		;OUTPUT RESET
	STA	HMP0(X)		;OUTPUT HM OFFSET
	RTS
;
;   NIBBLE SWAP
;
NIBBLE:	ASL
	ADC	#0
	ASL
	ADC	#0
	ASL
	ADC	#0
	ASL
	ADC	#0
	RTS
	.PAGE
;   OVERSCAN PROCESSING
OVRSCN:	LDX	SCNNO
	LDA	OSCAN(X)
	STA	WSYNC		;START NEW LINE
	STA	TIM64T		;START CLOCK
	.PAGE
;	VERTICAL BLANK

;   VERTICAL BLANK
OVROUT:	LDX	#0FF		;GET ALL ONES FOR TURNING THINGS ON
VSYN2:	LDA	TIMER		;OVERSCAN OVER?
	BNE	VSYN2		;BRANCH IF NOT
	STX	VBLANK		;START VERTICAL BLANK
	STA	WSYNC		;3 BLANKS BEFORE SYNC
	STA	WSYNC
	STA	WSYNC
	STX	VSYNC		;START VERTICAL SYNC
	STA	WSYNC		;3 LINES OF SYNC
	STA	WSYNC
	STA	WSYNC
	STA	VSYNC		;TURN OFF VERTICAL SYNC
	STA	HMCLR		;KILL ANY MOTION LEFT
	STA	VBLANK		;TURN ON SCREEN COLOR
	LDA	# 30		;GET TIME FOR VERT. BLANK
	STA	TIM64T		;START TIMER
;
;VERTICAL BLANK ROUTINE
VGLK:	JSR	TICK		;COUNT CLOCK
	BNE	10$		;BRANCH IF TIMER EXPIRED
	LDA	SCNNO		;SEE IF SCREEN #2
	CMP	#2		;
	BEQ	20$		;IS SO CALL BUTTON
	JSR	BTEST		;NOT SEE A BUTTON PRESSED
	JMP	VBLKND		;END
20$:	JSR	BUTTON		;PROCESS BUTTON
	BMI	30$		;MINUS IF START PRESSED
	JMP	VBLKND		;END
30$:	JMP	GAMSTR		;START GAME
10$:	LDA	SCNNO		;GET SCREEN #
	BNE	40$		;NOT 0
	JSR	SCRN1		;0 GOTO SCREEN 1
	LDA	#10.		;FOR 10 SECONDS
	JSR	SETIME		;
	JMP	VBLKND		;END
40$:	CMP	#1		;SCREEN 1?
	BNE	50$		;NOPE
	JSR	SCRN2		;YES GOTO SCREEN 2
	LDA	#30.		;FOR 30 SECONDS
	JSR	SETIME		;
	JMP	VBLKND		;END
50$:	LDA	#0		;GOTO SCREEN 0
	STA	SCNNO
	LDA	#20.		;FOR 10 SECONDS
	JSR	SETIME
	JMP	VBLKND
BTEST:	LDA	PORTB
	EOR	#0FF
	AND	#34
	BEQ	10$
	JSR	SCRN2
	LDA	#30.
	JSR	SETIME
10$:	RTS
	.PAGE
	.PAGE
	.PAGE
TEST:	STA	ROMSWT		;SWITCH ROMS
	LDA	0FFFD		;RESET HIGH BYTE
	AND	#10		;BIT FOUR MUST BE 1
	TAY			;RETURN 0 FOR NOT ROM
	LDA	#0
	STA	ROMSWT		;REENABLE ROM 0
	TYA			;RESET FLAGS
	RTS
	.PAGE
;TRANSFER THE GAME START ROUTINE TO RAM
;THEN JUMP TO IT
GAMSTR:	LDX	#0E
10$:	LDA	STRT(X)
	STA	SCRPAD(X)
	DEX
	BPL	10$
	JMP	LOWJMP
STRT:	ORA	#80
	STA	ROMSWT		;SWITCH
	STA	WSYNC
	STA	WSYNC
	JMP	@0FFFC		;START
	.PAGE

; DEBOUNCE BUTTONS
BUTTON:	LDA	PORTB		;READ SWITCHES
	EOR	#20		;START ON
	TAY
	LDA	OSWTCH		;SAVE OLD SWITCHES
	STY	OSWTCH		;REPLACE WITH NEW
	TAY			;COPY OLD
	AND	OSWTCH		;MAKE ONES WHERE BOTH OFF
	ORA	SWSTAT		;OR IN STATUS
	STA	SWSTAT		;TURN OFF IN STATUS
	TYA			;GET BACK OLD
	ORA	OSWTCH		;MAKE ZEROS WHERE BOTH ON
	AND	SWSTAT		;TURN ON IN STATUS
	TAY			;SAVE THIS STATE
	EOR	SWSTAT		;
	AND	SWSTAT
	STY	SWSTAT		;UPDATE STATUS
;
; ACC CONTAINS BITS FOR TESTING HIGH=CHANGE
;
;CHECK FOR A BUTTON PRESSED IF SO
;EITHER INCREMENT COUNTER OR START
;GAME
	CMP	#0
	BNE	5$
	RTS
5$:	PHA
	LDA	#30.
	JSR	SETIME
	PLA
	LSR
	LSR
	LSR
	BCC	10$
	INC	TENS
	JMP	30$
10$:	LSR
	LSR
	BCC	20$
	INC	ONES
	JMP	30$
20$:	LSR
	BCC	30$
	JMP	START
30$:	LDA	ONES
	CMP	#0A
	BNE	40$
	LDA	#0
	STA	ONES
40$:	LDA	TENS
	CMP	TMAX
	BNE	50$
	LDA	#0
	STA	TENS
50$:	LDX	TMAX
	DEX
	CPX	TENS
	BNE	60$
	LDA	ONES
	CMP	OMAX
	BCC	60$
	LDA	#0
	STA	ONES
60$:	LDA	TENS
	BNE	70$
	LDA	ONES
	BNE	70$
	LDA	#1
	STA	ONES
70$:	LDA	#0
	RTS
	.PAGE
LOWJMP:	LDA	TENS
	ASL			;*2
	ASL			;*4
	ASL			;*8
	CLC
	ADC	TENS		;*9
	ADC	TENS		;*10
	ADC	ONES		;VALUE
	JSR	SCRPAD
40$:	RTS
START:	LDA	#0FF
	RTS

;   COLD START
WAKEUP:	SEI			;DISABLE IRQ
	CLD			;WORK IN BINARY
	LDX	#0FF		;GET TOP OF RAM
	TXS			;INIT STACK
	INX			;GET A ZERO
	TXA			;ZIP REG A
CLEAR:	STA	PNTR0(X)	;CLEAR RAM
	INX			;POINT TO NEXT LOC
	BNE	CLEAR		;LOOP TILL DONE
;
;   MISC TIA INITS
	LDA	#1
	STA	ONES
	LDY	#0FF
	LDA	#0
	STA	TENS
	STA	SCNNO
	STA	CTLSWA
	STA	CTLSWB
	JSR	ROMCNT
	LDA	#20.
	JSR	SETIME
	JMP	VBLKND		;START SYNCING TV
	.PAGE
;READ ROM COUNT SWITCH.  THE VALUE IS
;THE NUMBER OF EMPTY ROM SOCKETS.
ROMCNT:	LDA	CSWTCH
	AND	#0F
	STA	TEMP
	LDA	#47.
	SEC
	SBC	TEMP
	LDX	#0
5$:	SEC
	SBC	#10.
	BMI	10$
	INX
	JMP	5$
10$:	CLC
	ADC	#11.
	STA	OMAX
	INX
	STX	TMAX
	.PAGE
SETIME:	STA	SECOND
	LDA	#^D60
	STA	TICKS
	RTS
TICK:	DEC	TICKS
	BNE	TICK0
	DEC	SECOND
	BNE	TICK1
	LDA	#0FF
	RTS
TICK1:	LDA	#^D60
	STA	TICKS
TICK0:	LDA	#0
	RTS
CLRSCN:	LDX	#^D24
	LDA	#0
CLRSC1:	STA	TEXT(X)
	DEX
	BPL	CLRSC1
	RTS
SCRN1:	JSR	CLRSCN
	LDA	#1
	STA	SCNNO
	LDX	#^D24
SCRN10:	LDA	SCR1(X)
	STA	TEXT(X)
	DEX
	BPL	SCRN10
	RTS
SCRN2:	JSR	CLRSCN
	LDA	#2
	STA	SCNNO
	LDX	#^D24
SCRN20:	LDA	SCR2(X)
	STA	TEXT(X)
	DEX
	BPL	SCRN20
	RTS


;   TABLES
;
;
;   PARAMETER CHANGE DISPLAY
;	UNUSED BYTES HERE (IF ANY)
;
	.=0F400
TAB2:	.BYTE 02,0BB,5A,30,5F,0EE,3D,0A8
	.=0F440
PZERO:	.BYTE	3,7,0F,1F,3F,3F,7F,7F
	.BYTE	7F,3F,3F,1F,1F,1F,1F,0F
	.BYTE	0F,0F,0F,0F,7,7,7,7
	.BYTE	7,7,7,7,3,3,3
	.REPT	31.
	.BYTE	3
	.ENDR
P0SHF:	.BYTE	0
	.BYTE	20,20,20,20,0,20,0,10
	.BYTE	10,20,0,10,10,10,0F0,10
	.BYTE	10,10,0,0F0,0,10,0,0
	.BYTE	10,0,0,0F0,0,0,10
	.REPT	31.
	.BYTE	0
	.ENDR
M0SHF:	.BYTE	0
	.BYTE	30,20,20,10,10,10,10,10
	.BYTE	10,10,10,10,0,10,0,10
	.BYTE	0,10,0,0,0,10,0,0
	.REPT	38.
	.BYTE	0
	.ENDR
	.=0F500
P1SHF:	.BYTE	0
	.BYTE	-20,-20,-20,-20,0,-20,0,-10
	.BYTE	-10,-20,0,-10,-10,-10,-0F0,-10
	.BYTE	-10,-10,0,-0F0,0,-10,0,0
	.BYTE	-10,0,0,-0F0,0,0,-10
	.REPT	31.
	.BYTE	0
	.ENDR
M1SHF:	.BYTE	0
	.BYTE	-30,-20,-20,-10,-10,-10,-10,-10
	.BYTE	-10,-10,-10,-10,0,-10,0,-10
	.BYTE	0,-10,0,0,0,-10,0,0
	.REPT	38.
	.BYTE	0
	.ENDR
IPOS:	.BYTE	69,85,7A,87
OSCAN:	.BYTE	6D,5D,4A
	.BYTE	0,0		;TWO TO THE GOOD!!
;
;   CHARACTER GRAPHICS
;
	.=0F600		;PUT AT PAGE BOUNDRY AT TOP
GRAPH:
	.BYTE	7C, 0C6, 0E6, 0D6, 0CE, 0C6, 7C	;A
ONE:	.BYTE	0FC, 30, 30, 30, 30, 70, 30	;1
	.BYTE	0FE, 0E0, 78, 3C, 0E, 0C6, 7C	;2
	.BYTE	 7C, 0C6, 06, 3C, 18, 0C, 7E	;3
	.BYTE	 0C, 0C, 0FE, 0CC, 6C, 3C, 1C	;4
	.BYTE	 7C, 0C6, 06, 06, 0FC, 0C0, 0FC	;5
	.BYTE	 7C, 0C6, 0C6, 0FC, 0C0, 60, 3C	;6
	.BYTE	 30, 30, 30, 18, 0C, 0C6, 0FE	;7
	.BYTE	 7C, 0C6, 0C6, 7C, 0C6, 0C6, 7C	;8
	.BYTE	 78, 0C, 06, 7E, 0C6, 0C6, 7C	;9
BLANK:	.BYTE	0,0,0,0,0,0,0		;SPACE AND DOT

	.BYTE	02,02,03,02,02,03,01	;B
	.BYTE	92,92,93,92,92,93,39	;C
	.BYTE	40,40,70,40,40,70,30	;D
	.BYTE	94,94,0A4,0F4,94,94,0F4	;E
	.BYTE	03,07,04,04,04,04,04	;F
	.BYTE	74,95,95,95,95,95,75	;10
	.BYTE	0E0,20,20,0E0,20,020,0E0	;11
	.BYTE	0BC,24,24,24,24,24,0BC	;12
	.BYTE	0E0,20,20,20,20,020,0E0	;13
	.BYTE	0BD,25,25,25,25,25,0BD	;14
	.BYTE	28,28,28,0E8,0AA,0AD,0E8	;15
	.BYTE	0E0,20,20,20,20,20,20	;16
	.BYTE	93,92,92,93,92,92,0BB	;17
	.BYTE	4B,48,28,79,48,48,7B	;18
	.BYTE	3C,04,04,3C,21,21,3D	;19
	.BYTE	79,41,41,79,0A,0A,7A	;1A
	.BYTE	20,20,20,20,20,20,70	;1B
	.BYTE	0F4,84,84,0E4,85,86,0F4	;1C
	.BYTE	02,02,02,02,02,03,02	;1D
	.BYTE	0F,08,08,0E,08,08,0F	;1E
	.BYTE	92,92,92,92,9A,96,0D2	;1F
	.BYTE	0C0,40,40,0C0,40,40,0D0	;20
	.BYTE	0D2,12,14,9E,12,12,0DE	;21
	.BYTE	03,02,02,02,02,02,03	;22
	.BYTE	4B,4A,7A,4B,48,78,33	;23
	.BYTE	0,0,0,0			;PAD AREA
	.BYTE	10,10,10,10,50,0B0,10	;24
	.BYTE	0BC,0A0,0A0,0B8,0A0,0A0,0BC	;25
	.BYTE	4B,4A,4A,4A,5A,6A,4A	;26
	.BYTE	8B,8A,8A,8A,0AA,0DA,8A	;27
	.BYTE	0E0,20,20,0E0,20,20,0E0	;28
	.BYTE	3D,0A1,0A1,39,0A1,0A1,3D	;29
	.BYTE	04,04,02,07,04,04,07	;2A
SCR1:	.BYTE	0A,0B,0C,0D,0E,0A
	.BYTE	0A,0F,10,11,12,0A
	.BYTE	13,14,15,16,17,18
	.BYTE	0A,19,1A,1B,1C,1D

SCR2:	.BYTE	0A,1E,1F,20,21,0A
	.BYTE	0A,22,23,24,25,0A
	.BYTE	0A,26,27,28,29,2A
	.BYTE	0A,0A,0A,0A,0A,0A
TMR:	.BYTE	0,07E,81,0A5,0A9,0BD,0A5,0BD,81,7E
AT0:	.BYTE	0
	.BYTE	0C0,0C0,0E0,60,7F,7F,30,30
	.BYTE	38,18,18,1D,0F,0F,07,07
AT1:	.BYTE	0
	.BYTE	19,19,39,31,0F1,0F1,61,61
	.BYTE	0E1,0C1,0C1,0C1,81,81,1F,1F
AT2:	.BYTE	0
	.BYTE	98,98,9C,8C,8F,8F,86,86
	.BYTE	87,83,83,83,81,81,0F8,0F8
AT3:	.BYTE	0
	.BYTE	3,3,7,6,0FE,0FE,0C,0C
	.BYTE	1C,18,18,0B8,0F0,0F0,0E0,0E0
AT4:	.BYTE	0
	.BYTE	60,60,60,61,63,67,6E,6F
	.BYTE	63,60,60,60,60,61,7F,7F
AT5:	.BYTE	0
	.BYTE	33,73,0E3,0C3,83,3,3,3
	.BYTE	0C3,0E3,63,63,63,0E3,0C3,3
;
;   RESTART VECTORS
;
	.=0F7FA
	.WORD	WAKEUP		;NMI
	.WORD	WAKEUP		;RESET
	.WORD	WAKEUP		;IRQ
	.END
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             